Elm.Model = Elm.Model || {};
Elm.Model.make = function (_elm) {
   "use strict";
   _elm.Model = _elm.Model || {};
   if (_elm.Model.values)
   return _elm.Model.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Model",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var Game = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,board: a
             ,graveyard1: b
             ,graveyard2: c
             ,state: e
             ,turn: d
             ,turnInSeconds: f};
   });
   var Finished = function (a) {
      return {ctor: "Finished"
             ,_0: a};
   };
   var CheckMate = {ctor: "CheckMate"};
   var Promotion = function (a) {
      return {ctor: "Promotion"
             ,_0: a};
   };
   var Destination = function (a) {
      return {ctor: "Destination"
             ,_0: a};
   };
   var Origin = {ctor: "Origin"};
   var Player = F2(function (a,b) {
      return {_: {}
             ,color: a
             ,graveyard: b};
   });
   var emptyRow = A2($List.repeat,
   8,
   $Maybe.Nothing);
   var getSquareContent = function (board) {
      return function ($) {
         return $Maybe$Extra.join(A2($Basics.flip,
         $Dict.get,
         board)($));
      };
   };
   var validateMove = F3(function (origin,
   destination,
   game) {
      return function () {
         var otherColor = function () {
            var _v0 = A2(getSquareContent,
            game.board,
            destination);
            switch (_v0.ctor)
            {case "Just":
               return !_U.eq(_v0._0.color,
                 game.turn);
               case "Nothing": return true;}
            _U.badCase($moduleName,
            "between lines 59 and 66");
         }();
         return !_U.eq(origin,
         destination) && otherColor;
      }();
   });
   var move = F3(function (game,
   origin,
   destination) {
      return function () {
         var board = game.board;
         var destinationSquare = A2(getSquareContent,
         board,
         destination);
         var originSquare = A2(getSquareContent,
         board,
         origin);
         var board$ = A3($Dict.insert,
         destination,
         originSquare,
         board);
         var game$ = _U.replace([["board"
                                 ,A3($Dict.insert,
                                 origin,
                                 $Maybe.Nothing,
                                 board$)]],
         game);
         return function () {
            switch (destinationSquare.ctor)
            {case "Just":
               return function () {
                    var _v4 = game.turn;
                    switch (_v4.ctor)
                    {case "Black":
                       return _U.replace([["graveyard1"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard1,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);
                       case "White":
                       return _U.replace([["graveyard2"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard2,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);}
                    _U.badCase($moduleName,
                    "between lines 92 and 103");
                 }();
               case "Nothing": return game$;}
            _U.badCase($moduleName,
            "between lines 90 and 104");
         }();
      }();
   });
   var piece = F2(function (f,c) {
      return {_: {}
             ,color: c
             ,figure: f
             ,moved: false};
   });
   var Piece = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: c
             ,figure: a
             ,moved: b};
   });
   var King = {ctor: "King"};
   var Queen = {ctor: "Queen"};
   var Rook = {ctor: "Rook"};
   var Bishop = {ctor: "Bishop"};
   var Knight = {ctor: "Knight"};
   var Pawn = {ctor: "Pawn"};
   var White = {ctor: "White"};
   var Black = {ctor: "Black"};
   var other = function (color) {
      return function () {
         switch (color.ctor)
         {case "Black": return White;
            case "White": return Black;}
         _U.badCase($moduleName,
         "between lines 15 and 20");
      }();
   };
   var makeInitialBoard = function () {
      var zip = $List.map2(F2(function (v0,
      v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }));
      var makeRow = function (number) {
         return A2(zip,
         _L.fromArray([_U.chr("A")
                      ,_U.chr("B")
                      ,_U.chr("C")
                      ,_U.chr("D")
                      ,_U.chr("E")
                      ,_U.chr("F")
                      ,_U.chr("G")
                      ,_U.chr("H")]),
         A2($List.repeat,8,number));
      };
      var makePiece = F2(function (pieceColor,
      figure) {
         return $Maybe.Just(A2(piece,
         figure,
         pieceColor));
      });
      var makeFirstRow = function (color) {
         return A2($List.map,
         makePiece(color),
         _L.fromArray([Rook
                      ,Knight
                      ,Bishop
                      ,Queen
                      ,King
                      ,Bishop
                      ,Knight
                      ,Rook]));
      };
      var pawnRow = function (pawnColor) {
         return $List.repeat(8)($Maybe.Just(A2(piece,
         Pawn,
         pawnColor)));
      };
      return $Dict.fromList(A2($Basics._op["++"],
      A2(zip,
      makeRow(8),
      makeFirstRow(Black)),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(7),
      pawnRow(Black)),
      A2($Basics._op["++"],
      A2(zip,makeRow(6),emptyRow),
      A2($Basics._op["++"],
      A2(zip,makeRow(5),emptyRow),
      A2($Basics._op["++"],
      A2(zip,makeRow(4),emptyRow),
      A2($Basics._op["++"],
      A2(zip,makeRow(3),emptyRow),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(2),
      pawnRow(White)),
      A2(zip,
      makeRow(1),
      makeFirstRow(White))))))))));
   }();
   var makeInitialGame = function () {
      var emptyGraveyard = A2($Basics._op["++"],
      emptyRow,
      emptyRow);
      return {_: {}
             ,board: makeInitialBoard
             ,graveyard1: emptyGraveyard
             ,graveyard2: emptyGraveyard
             ,state: Origin
             ,turn: White
             ,turnInSeconds: 0};
   }();
   _elm.Model.values = {_op: _op
                       ,Black: Black
                       ,White: White
                       ,other: other
                       ,Pawn: Pawn
                       ,Knight: Knight
                       ,Bishop: Bishop
                       ,Rook: Rook
                       ,Queen: Queen
                       ,King: King
                       ,Piece: Piece
                       ,piece: piece
                       ,getSquareContent: getSquareContent
                       ,validateMove: validateMove
                       ,move: move
                       ,emptyRow: emptyRow
                       ,makeInitialBoard: makeInitialBoard
                       ,Player: Player
                       ,Origin: Origin
                       ,Destination: Destination
                       ,Promotion: Promotion
                       ,CheckMate: CheckMate
                       ,Finished: Finished
                       ,Game: Game
                       ,makeInitialGame: makeInitialGame};
   return _elm.Model.values;
};