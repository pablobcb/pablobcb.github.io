Elm.Chess = Elm.Chess || {};
Elm.Chess.Game = Elm.Chess.Game || {};
Elm.Chess.Game.make = function (_elm) {
   "use strict";
   _elm.Chess = _elm.Chess || {};
   _elm.Chess.Game = _elm.Chess.Game || {};
   if (_elm.Chess.Game.values)
   return _elm.Chess.Game.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Chess.Game",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Board = Elm.Chess.Board.make(_elm),
   $Chess$Color = Elm.Chess.Color.make(_elm),
   $Chess$Piece = Elm.Chess.Piece.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var validateMove = F3(function (origin,
   destination,
   game) {
      return function () {
         var board = game.board;
         var getSquareContent$ = $Chess$Board.getSquareContent(board);
         var originSquare = getSquareContent$(origin);
         var destinationSquare = getSquareContent$(destination);
         var otherColor = function () {
            switch (destinationSquare.ctor)
            {case "Just":
               return !_U.eq(destinationSquare._0.color,
                 game.turn);
               case "Nothing": return true;}
            _U.badCase($moduleName,
            "between lines 151 and 158");
         }();
         var isDestinationValid = function () {
            switch (originSquare.ctor)
            {case "Just":
               return function () {
                    var specialPositions = function () {
                       var _v4 = originSquare._0.figure;
                       switch (_v4.ctor)
                       {case "Pawn":
                          return function () {
                               var pawnTakeRanges$ = $Chess$Piece.pawnTakeRanges(game.turn);
                               var right = getSquareContent$(A2($Chess$Board.shift,
                               origin,
                               function (_) {
                                  return _.right;
                               }(pawnTakeRanges$)));
                               var left = getSquareContent$(A2($Chess$Board.shift,
                               origin,
                               function (_) {
                                  return _.left;
                               }(pawnTakeRanges$)));
                               var right$ = function () {
                                  switch (right.ctor)
                                  {case "Just":
                                     return _L.fromArray([A2($Chess$Board.shift,
                                       origin,
                                       function (_) {
                                          return _.right;
                                       }(pawnTakeRanges$))]);
                                     case "Nothing":
                                     return _L.fromArray([]);}
                                  _U.badCase($moduleName,
                                  "between lines 127 and 133");
                               }();
                               var left$ = function () {
                                  switch (left.ctor)
                                  {case "Just":
                                     return _L.fromArray([A2($Chess$Board.shift,
                                       origin,
                                       function (_) {
                                          return _.left;
                                       }(pawnTakeRanges$))]);
                                     case "Nothing":
                                     return _L.fromArray([]);}
                                  _U.badCase($moduleName,
                                  "between lines 134 and 139");
                               }();
                               return A2(F2(function (x,y) {
                                  return A2($Basics._op["++"],
                                  x,
                                  y);
                               }),
                               right$,
                               left$);
                            }();}
                       return _L.fromArray([]);
                    }();
                    var validPositions = A2($Chess$Board.getValidPositions,
                    $Chess$Piece.ranges(originSquare._0),
                    origin);
                    return A2($List.member,
                    destination,
                    A2($Basics._op["++"],
                    validPositions,
                    specialPositions));
                 }();}
            _U.badCase($moduleName,
            "between lines 107 and 149");
         }();
         return !_U.eq(origin,
         destination) && (isDestinationValid && otherColor);
      }();
   });
   var move = F3(function (game,
   origin,
   destination) {
      return function () {
         var board = game.board;
         var destinationSquare = A2($Chess$Board.getSquareContent,
         board,
         destination);
         var originSquare = A2($Chess$Board.getSquareContent,
         board,
         origin);
         var board$ = function () {
            var piece = function () {
               switch (originSquare.ctor)
               {case "Just":
                  return $Maybe.Just(_U.replace([["moved"
                                                 ,true]],
                    originSquare._0));}
               _U.badCase($moduleName,
               "between lines 62 and 67");
            }();
            return A3($Dict.insert,
            destination,
            piece,
            board);
         }();
         var game$ = _U.replace([["board"
                                 ,A3($Dict.insert,
                                 origin,
                                 $Maybe.Nothing,
                                 board$)]],
         game);
         return function () {
            switch (destinationSquare.ctor)
            {case "Just":
               return function () {
                    var _v13 = game.turn;
                    switch (_v13.ctor)
                    {case "Black":
                       return _U.replace([["graveyard1"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard1,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);
                       case "White":
                       return _U.replace([["graveyard2"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard2,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);}
                    _U.badCase($moduleName,
                    "between lines 76 and 87");
                 }();
               case "Nothing": return game$;}
            _U.badCase($moduleName,
            "between lines 74 and 88");
         }();
      }();
   });
   var Game = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,board: a
             ,graveyard1: b
             ,graveyard2: c
             ,state: e
             ,turn: d
             ,turnInSeconds: f};
   });
   var Finished = function (a) {
      return {ctor: "Finished"
             ,_0: a};
   };
   var CheckMate = {ctor: "CheckMate"};
   var Promotion = function (a) {
      return {ctor: "Promotion"
             ,_0: a};
   };
   var Destination = function (a) {
      return {ctor: "Destination"
             ,_0: a};
   };
   var Origin = {ctor: "Origin"};
   var makeInitialGame = function () {
      var emptyGraveyard = A2($Basics._op["++"],
      $Chess$Board.emptyRow,
      $Chess$Board.emptyRow);
      return {_: {}
             ,board: $Chess$Board.makeInitialBoard
             ,graveyard1: emptyGraveyard
             ,graveyard2: emptyGraveyard
             ,state: Origin
             ,turn: $Chess$Color.White
             ,turnInSeconds: 0};
   }();
   _elm.Chess.Game.values = {_op: _op
                            ,Origin: Origin
                            ,Destination: Destination
                            ,Promotion: Promotion
                            ,CheckMate: CheckMate
                            ,Finished: Finished
                            ,Game: Game
                            ,makeInitialGame: makeInitialGame
                            ,move: move
                            ,validateMove: validateMove};
   return _elm.Chess.Game.values;
};