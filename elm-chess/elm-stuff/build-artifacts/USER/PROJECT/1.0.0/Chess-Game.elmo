Elm.Chess = Elm.Chess || {};
Elm.Chess.Game = Elm.Chess.Game || {};
Elm.Chess.Game.make = function (_elm) {
   "use strict";
   _elm.Chess = _elm.Chess || {};
   _elm.Chess.Game = _elm.Chess.Game || {};
   if (_elm.Chess.Game.values)
   return _elm.Chess.Game.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Chess.Game",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Board = Elm.Chess.Board.make(_elm),
   $Chess$Color = Elm.Chess.Color.make(_elm),
   $Chess$Piece = Elm.Chess.Piece.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var remove = function (x) {
      return $List.filter(F2(function (x,
      y) {
         return !_U.eq(x,y);
      })(x));
   };
   var getValidDestinations = F3(function (origin,
   piece,
   game) {
      return function () {
         var regularMoves = A4($Chess$Board.getRegularMoves,
         game.turn,
         game.board,
         piece,
         origin);
         var getSquareContent$ = $Chess$Board.getSquareContent(game.board);
         var allowedMoves = function () {
            var _v0 = piece.figure;
            switch (_v0.ctor)
            {case "Pawn":
               return function () {
                    var positionAhead = A2($Chess$Board.positionAhead,
                    game.turn,
                    origin);
                    var isPositionAheadBlocked = $Maybe$Extra.isJust(A2($Chess$Board.getSquareContent,
                    game.board,
                    positionAhead));
                    var enPassant = function () {
                       var _v1 = game.state;
                       switch (_v1.ctor)
                       {case "EnPassant":
                          return _L.fromArray([]);}
                       return _L.fromArray([]);
                    }();
                    var pawnTakeRanges$ = $Chess$Board.pawnTakeRanges(game.turn);
                    var getSquareContent$$ = function (f) {
                       return getSquareContent$($Chess$Board.shift(origin)(f(pawnTakeRanges$)));
                    };
                    var takeToRight = function () {
                       var _v3 = getSquareContent$$(function (_) {
                          return _.right;
                       });
                       switch (_v3.ctor)
                       {case "Just":
                          return _L.fromArray([A2($Chess$Board.shift,
                            origin,
                            function (_) {
                               return _.right;
                            }(pawnTakeRanges$))]);
                          case "Nothing":
                          return _L.fromArray([]);}
                       _U.badCase($moduleName,
                       "between lines 115 and 121");
                    }();
                    var takeToLeft = function () {
                       var _v5 = getSquareContent$$(function (_) {
                          return _.left;
                       });
                       switch (_v5.ctor)
                       {case "Just":
                          return _L.fromArray([A2($Chess$Board.shift,
                            origin,
                            function (_) {
                               return _.left;
                            }(pawnTakeRanges$))]);
                          case "Nothing":
                          return _L.fromArray([]);}
                       _U.badCase($moduleName,
                       "between lines 122 and 128");
                    }();
                    return A2($Basics._op["++"],
                    takeToLeft,
                    A2($Basics._op["++"],
                    takeToRight,
                    A2($Basics._op["++"],
                    enPassant,
                    isPositionAheadBlocked ? A2(remove,
                    positionAhead,
                    regularMoves) : regularMoves)));
                 }();}
            return regularMoves;
         }();
         var destinationHasNoAlly = function (destination) {
            return function () {
               var _v7 = getSquareContent$(destination);
               switch (_v7.ctor)
               {case "Just":
                  return !_U.eq(_v7._0.color,
                    game.turn);
                  case "Nothing": return true;}
               _U.badCase($moduleName,
               "between lines 152 and 158");
            }();
         };
         var filterDestinations = function (destination) {
            return destinationHasNoAlly(destination) && !_U.eq(origin,
            destination);
         };
         return A2($List.filter,
         destinationHasNoAlly,
         allowedMoves);
      }();
   });
   var move = F3(function (game,
   origin,
   destination) {
      return function () {
         var board = game.board;
         var destinationSquare = A2($Chess$Board.getSquareContent,
         board,
         destination);
         var originSquare = A2($Chess$Board.getSquareContent,
         board,
         origin);
         var board$ = function () {
            var piece = function () {
               switch (originSquare.ctor)
               {case "Just":
                  return $Maybe.Just(_U.replace([["moved"
                                                 ,true]],
                    originSquare._0));}
               _U.badCase($moduleName,
               "between lines 64 and 69");
            }();
            return A3($Dict.insert,
            destination,
            piece,
            board);
         }();
         var game$ = _U.replace([["board"
                                 ,A3($Dict.insert,
                                 origin,
                                 $Maybe.Nothing,
                                 board$)]],
         game);
         return function () {
            switch (destinationSquare.ctor)
            {case "Just":
               return function () {
                    var _v13 = game.turn;
                    switch (_v13.ctor)
                    {case "Black":
                       return _U.replace([["graveyard1"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard1,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);
                       case "White":
                       return _U.replace([["graveyard2"
                                          ,A2($Basics._op["++"],
                                          game$.graveyard2,
                                          _L.fromArray([$Maybe.Just(destinationSquare._0.figure)]))]],
                         game$);}
                    _U.badCase($moduleName,
                    "between lines 78 and 89");
                 }();
               case "Nothing": return game$;}
            _U.badCase($moduleName,
            "between lines 76 and 90");
         }();
      }();
   });
   var Game = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,board: a
             ,graveyard1: b
             ,graveyard2: c
             ,state: e
             ,turn: d
             ,turnInSeconds: f};
   });
   var Finished = function (a) {
      return {ctor: "Finished"
             ,_0: a};
   };
   var CheckMate = {ctor: "CheckMate"};
   var EnPassant = function (a) {
      return {ctor: "EnPassant"
             ,_0: a};
   };
   var Promotion = function (a) {
      return {ctor: "Promotion"
             ,_0: a};
   };
   var Destination = F2(function (a,
   b) {
      return {ctor: "Destination"
             ,_0: a
             ,_1: b};
   });
   var Origin = {ctor: "Origin"};
   var makeInitialGame = function () {
      var emptyGraveyard = A2($Basics._op["++"],
      $Chess$Board.emptyRow,
      $Chess$Board.emptyRow);
      return {_: {}
             ,board: $Chess$Board.makeInitialBoard
             ,graveyard1: emptyGraveyard
             ,graveyard2: emptyGraveyard
             ,state: Origin
             ,turn: $Chess$Color.White
             ,turnInSeconds: 0};
   }();
   _elm.Chess.Game.values = {_op: _op
                            ,Origin: Origin
                            ,Destination: Destination
                            ,Promotion: Promotion
                            ,EnPassant: EnPassant
                            ,CheckMate: CheckMate
                            ,Finished: Finished
                            ,Game: Game
                            ,makeInitialGame: makeInitialGame
                            ,move: move
                            ,remove: remove
                            ,getValidDestinations: getValidDestinations};
   return _elm.Chess.Game.values;
};