Elm.Chess = Elm.Chess || {};
Elm.Chess.Game = Elm.Chess.Game || {};
Elm.Chess.Game.make = function (_elm) {
   "use strict";
   _elm.Chess = _elm.Chess || {};
   _elm.Chess.Game = _elm.Chess.Game || {};
   if (_elm.Chess.Game.values)
   return _elm.Chess.Game.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Chess.Game",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Board = Elm.Chess.Board.make(_elm),
   $Chess$Color = Elm.Chess.Color.make(_elm),
   $Chess$Piece = Elm.Chess.Piece.make(_elm),
   $Chess$SpecialMove = Elm.Chess.SpecialMove.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var noSpecialMove = {ctor: "_Tuple2"
                       ,_0: _L.fromArray([])
                       ,_1: $Maybe.Nothing};
   var getPawnValidTakes = F2(function (game,
   origin) {
      return function () {
         var canTakeTo = function (f) {
            return function () {
               var range = f($Chess$Board.pawnTakeRanges(game.turn));
               var enemyPiece = $Chess$Board.getSquareContent(game.board)(A2($Chess$Board.shift,
               origin,
               range));
               return $Maybe$Extra.isJust(enemyPiece) ? _L.fromArray([A2($Chess$Board.shift,
               origin,
               range)]) : _L.fromArray([]);
            }();
         };
         var pawnTakePositions = A2($Basics._op["++"],
         canTakeTo(function (_) {
            return _.left;
         }),
         canTakeTo(function (_) {
            return _.right;
         }));
         return pawnTakePositions;
      }();
   });
   var getPawnSpecialDestinations = F2(function (game,
   origin) {
      return function () {
         var nextPosition = A2($Chess$Board.positionAhead,
         game.turn,
         origin);
         var nextRow = $Basics.snd(nextPosition);
         var adjacentPositions = $Chess$Board.getHorizontalAdjacentPositions(origin);
         var left = $Basics.fst(adjacentPositions);
         var right = $Basics.snd(adjacentPositions);
         var $ = _U.eq(nextRow,
         1) || _U.eq(nextRow,
         8) ? {ctor: "_Tuple2"
              ,_0: _L.fromArray([])
              ,_1: $Maybe.Just($Chess$SpecialMove.Promotion(nextPosition))} : function () {
            var _v0 = game.state;
            switch (_v0.ctor)
            {case "Origin":
               switch (_v0._0.ctor)
                 {case "Just":
                    return _U.eq(_v0._0._0,
                      left) || _U.eq(_v0._0._0,
                      right) ? function () {
                         var enPassantDestination = $Chess$Board.shift(_v0._0._0)(function () {
                            var _v3 = game.turn;
                            switch (_v3.ctor)
                            {case "Black":
                               return {ctor: "_Tuple2"
                                      ,_0: 0
                                      ,_1: -1};
                               case "White":
                               return {ctor: "_Tuple2"
                                      ,_0: 0
                                      ,_1: 1};}
                            _U.badCase($moduleName,
                            "between lines 258 and 264");
                         }());
                         return {ctor: "_Tuple2"
                                ,_0: _L.fromArray([enPassantDestination])
                                ,_1: $Maybe.Just($Chess$SpecialMove.EnPassant(enPassantDestination))};
                      }() : noSpecialMove;}
                 break;}
            return noSpecialMove;
         }(),
         specialDestinations = $._0,
         specialMove = $._1;
         var destinations = A2($Basics._op["++"],
         A2(getPawnValidTakes,
         game,
         origin),
         specialDestinations);
         return {ctor: "_Tuple2"
                ,_0: destinations
                ,_1: specialMove};
      }();
   });
   var getSpecialDestinations = F3(function (game,
   origin,
   piece) {
      return function () {
         var _v4 = piece.figure;
         switch (_v4.ctor)
         {case "King":
            return noSpecialMove;
            case "Pawn":
            return A2(getPawnSpecialDestinations,
              game,
              origin);}
         return noSpecialMove;
      }();
   });
   var getValidDestinations = F3(function (game,
   origin,
   piece) {
      return function () {
         var destinationHasNoAlly = function (destination) {
            return function () {
               var _v5 = A2($Chess$Board.getSquareContent,
               game.board,
               destination);
               switch (_v5.ctor)
               {case "Just":
                  return !_U.eq(_v5._0.color,
                    game.turn);
                  case "Nothing": return true;}
               _U.badCase($moduleName,
               "between lines 388 and 394");
            }();
         };
         var filterDestinations = function (destination) {
            return destinationHasNoAlly(destination) && !_U.eq(origin,
            destination);
         };
         var $ = A3(getSpecialDestinations,
         game,
         origin,
         piece),
         specialDestinations = $._0,
         specialMove = $._1;
         var regularDestinations = A4($Chess$Board.getRegularDestinations,
         game.turn,
         game.board,
         piece,
         origin);
         var validDestinations = A2($List.filter,
         destinationHasNoAlly,
         A2($Basics._op["++"],
         regularDestinations,
         specialDestinations));
         return {ctor: "_Tuple2"
                ,_0: validDestinations
                ,_1: specialMove};
      }();
   });
   var remove = function (x) {
      return $List.filter(F2(function (x,
      y) {
         return !_U.eq(x,y);
      })(x));
   };
   var updateGraveyard = F2(function (game,
   deadFigure) {
      return function () {
         var updateGraveyard = function (graveyard) {
            return $List.drop(1)(A2($Basics._op["++"],
            graveyard,
            _L.fromArray([$Maybe.Just(deadFigure)])));
         };
         return function () {
            var _v7 = game.turn;
            switch (_v7.ctor)
            {case "Black":
               return _U.replace([["graveyard1"
                                  ,updateGraveyard(game.graveyard1)]],
                 game);
               case "White":
               return _U.replace([["graveyard2"
                                  ,updateGraveyard(game.graveyard2)]],
                 game);}
            _U.badCase($moduleName,
            "between lines 147 and 156");
         }();
      }();
   });
   var move = F3(function (game,
   origin,
   destination) {
      return function () {
         var board = game.board;
         var destinationSquare = A2($Chess$Board.getSquareContent,
         board,
         destination);
         var originSquare = A2($Chess$Board.getSquareContent,
         board,
         origin);
         var board$ = function () {
            var piece = function () {
               switch (originSquare.ctor)
               {case "Just":
                  return $Maybe.Just(_U.replace([["moved"
                                                 ,true]],
                    originSquare._0));}
               _U.badCase($moduleName,
               "between lines 173 and 178");
            }();
            return A3($Dict.insert,
            destination,
            piece,
            board);
         }();
         var game$ = _U.replace([["board"
                                 ,A3($Dict.insert,
                                 origin,
                                 $Maybe.Nothing,
                                 board$)]],
         game);
         return function () {
            switch (destinationSquare.ctor)
            {case "Just":
               return A2(updateGraveyard,
                 game$,
                 destinationSquare._0.figure);
               case "Nothing": return game$;}
            _U.badCase($moduleName,
            "between lines 188 and 193");
         }();
      }();
   });
   var tick = function (game) {
      return _U.replace([["turnInSeconds"
                         ,game.turnInSeconds + 1]],
      game);
   };
   var resetClock = function (game) {
      return _U.replace([["turnInSeconds"
                         ,0]],
      game);
   };
   var passTurn = function (game) {
      return resetClock(_U.replace([["previousState"
                                    ,game.state]
                                   ,["turn"
                                    ,$Chess$Color.other(game.turn)]],
      game));
   };
   var Game = F7(function (a,
   b,
   c,
   d,
   e,
   f,
   g) {
      return {_: {}
             ,board: a
             ,graveyard1: b
             ,graveyard2: c
             ,previousState: f
             ,state: e
             ,turn: d
             ,turnInSeconds: g};
   });
   var Finished = function (a) {
      return {ctor: "Finished"
             ,_0: a};
   };
   var CheckMate = {ctor: "CheckMate"};
   var SelectPromotion = function (a) {
      return {ctor: "SelectPromotion"
             ,_0: a};
   };
   var Destination = F3(function (a,
   b,
   c) {
      return {ctor: "Destination"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var setValidDestinations = F2(function (game,
   selectedPosition) {
      return function () {
         var selectedSquare = A2($Chess$Board.getSquareContent,
         game.board,
         selectedPosition);
         return function () {
            switch (selectedSquare.ctor)
            {case "Just":
               return !_U.eq(game.turn,
                 selectedSquare._0.color) ? game : function () {
                    var $ = A3(getValidDestinations,
                    game,
                    selectedPosition,
                    selectedSquare._0),
                    validDestinations = $._0,
                    specialMove = $._1;
                    return _U.replace([["state"
                                       ,A3(Destination,
                                       selectedPosition,
                                       validDestinations,
                                       specialMove)]],
                    game);
                 }();
               case "Nothing": return game;}
            _U.badCase($moduleName,
            "between lines 416 and 439");
         }();
      }();
   });
   var Origin = function (a) {
      return {ctor: "Origin"
             ,_0: a};
   };
   var waitForPieceSelection = function (game) {
      return passTurn(_U.replace([["state"
                                  ,Origin($Maybe.Nothing)]],
      game));
   };
   var promotePiece = F3(function (game,
   promotedPiecePosition,
   figure) {
      return function () {
         var promotedTo = $Maybe.Just({_: {}
                                      ,color: game.turn
                                      ,figure: figure
                                      ,moved: true});
         var board$ = A3($Dict.insert,
         promotedPiecePosition,
         promotedTo,
         game.board);
         return passTurn(_U.replace([["board"
                                     ,board$]
                                    ,["state"
                                     ,Origin($Maybe.Nothing)]],
         game));
      }();
   });
   var makeInitialGame = function () {
      var emptyGraveyard = A2($Basics._op["++"],
      $Chess$Board.emptyRow,
      $Chess$Board.emptyRow);
      return {_: {}
             ,board: $Chess$Board.makeInitialBoard
             ,graveyard1: emptyGraveyard
             ,graveyard2: emptyGraveyard
             ,previousState: Origin($Maybe.Nothing)
             ,state: Origin($Maybe.Nothing)
             ,turn: $Chess$Color.White
             ,turnInSeconds: 0};
   }();
   var makeEnPassant = F4(function (game,
   origin,
   destination,
   enemyPawnPosition) {
      return function () {
         var game$ = A3(move,
         game,
         origin,
         destination);
         var board = A3($Dict.insert,
         origin,
         $Maybe.Nothing,
         game$.board);
         var board$ = A3($Dict.insert,
         enemyPawnPosition,
         $Maybe.Nothing,
         game$.board);
         var game$$ = A2(updateGraveyard,
         game$,
         $Chess$Piece.Pawn);
         return _U.replace([["board"
                            ,board$]
                           ,["previousState",game$$.state]
                           ,["state"
                            ,Origin($Maybe.Nothing)]
                           ,["turn"
                            ,$Chess$Color.other(game$$.turn)]],
         game$$);
      }();
   });
   var handleDestination = F5(function (game,
   selectedPosition,
   originPosition,
   validDestinations,
   specialMove) {
      return function () {
         var isEnemyPiece = function (square) {
            return function () {
               switch (square.ctor)
               {case "Just":
                  return !_U.eq(square._0.color,
                    game.turn);
                  case "Nothing": return false;}
               _U.badCase($moduleName,
               "between lines 457 and 465");
            }();
         };
         var game$ = A3(move,
         game,
         originPosition,
         selectedPosition);
         var selectedDestination = A2($Chess$Board.getSquareContent,
         game$.board,
         selectedPosition);
         var isPawn = function () {
            switch (selectedDestination.ctor)
            {case "Just":
               return _U.eq(selectedDestination._0.figure,
                 $Chess$Piece.Pawn) ? true : false;
               case "Nothing": return false;}
            _U.badCase($moduleName,
            "between lines 466 and 475");
         }();
         var hasMovedTwoSquares = _U.eq(selectedPosition,
         A2($Chess$Board.shift,
         originPosition,
         function () {
            var _v18 = game$.turn;
            switch (_v18.ctor)
            {case "Black":
               return {ctor: "_Tuple2"
                      ,_0: 0
                      ,_1: -2};
               case "White":
               return {ctor: "_Tuple2"
                      ,_0: 0
                      ,_1: 2};}
            _U.badCase($moduleName,
            "between lines 478 and 483");
         }()));
         var isPositionValid = A2($List.member,
         selectedPosition,
         validDestinations);
         return $Basics.not(isPositionValid) ? _U.replace([["state"
                                                           ,game.previousState]],
         game) : function () {
            switch (specialMove.ctor)
            {case "Just":
               switch (specialMove._0.ctor)
                 {case "EnPassant":
                    return _U.eq(selectedPosition,
                      specialMove._0._0) ? A3(makeEnPassant,
                      game,
                      originPosition,
                      selectedPosition)(A2($Chess$Board.positionBelow,
                      game.turn,
                      selectedPosition)) : function () {
                         var hasMovedTwoSquares = _U.eq(selectedPosition,
                         A2($Chess$Board.shift,
                         originPosition,
                         function () {
                            var _v23 = game$.turn;
                            switch (_v23.ctor)
                            {case "Black":
                               return {ctor: "_Tuple2"
                                      ,_0: 0
                                      ,_1: -2};
                               case "White":
                               return {ctor: "_Tuple2"
                                      ,_0: 0
                                      ,_1: 2};}
                            _U.badCase($moduleName,
                            "between lines 544 and 549");
                         }()));
                         var selectedDestination = A2($Chess$Board.getSquareContent,
                         game$.board,
                         selectedPosition);
                         var isPawn = function () {
                            switch (selectedDestination.ctor)
                            {case "Just":
                               return _U.eq(selectedDestination._0.figure,
                                 $Chess$Piece.Pawn) ? true : false;
                               case "Nothing": return false;}
                            _U.badCase($moduleName,
                            "between lines 532 and 541");
                         }();
                         return $Basics.not(isPawn) ? waitForPieceSelection(game$) : hasMovedTwoSquares ? _U.replace([["previousState"
                                                                                                                      ,game$.state]
                                                                                                                     ,["state"
                                                                                                                      ,Origin($Maybe.Just(selectedPosition))]
                                                                                                                     ,["turn"
                                                                                                                      ,$Chess$Color.other(game$.turn)]],
                         game$) : passTurn(_U.replace([["previousState"
                                                       ,game$.state]
                                                      ,["state"
                                                       ,Origin($Maybe.Nothing)]],
                         game$));
                      }();
                    case "Promotion":
                    return _U.replace([["previousState"
                                       ,game$.state]
                                      ,["state"
                                       ,SelectPromotion(specialMove._0._0)]],
                      game$);}
                 break;
               case "Nothing":
               return passTurn($Basics.not(isPawn) ? _U.replace([["state"
                                                                 ,Origin($Maybe.Nothing)]],
                 game$) : hasMovedTwoSquares ? _U.replace([["previousState"
                                                           ,game$.state]
                                                          ,["state"
                                                           ,Origin($Maybe.Just(selectedPosition))]],
                 game$) : _U.replace([["previousState"
                                      ,game$.state]
                                     ,["state"
                                      ,Origin($Maybe.Nothing)]],
                 game$));}
            _U.badCase($moduleName,
            "between lines 493 and 568");
         }();
      }();
   });
   var handleClick = F2(function (game,
   selectedPosition) {
      return function () {
         var _v26 = game.state;
         switch (_v26.ctor)
         {case "Destination":
            return A5(handleDestination,
              game,
              selectedPosition,
              _v26._0,
              _v26._1,
              _v26._2);
            case "Origin":
            return A2(setValidDestinations,
              game,
              selectedPosition);
            case "SelectPromotion":
            return game;}
         _U.badCase($moduleName,
         "between lines 573 and 587");
      }();
   });
   _elm.Chess.Game.values = {_op: _op
                            ,Origin: Origin
                            ,Destination: Destination
                            ,SelectPromotion: SelectPromotion
                            ,CheckMate: CheckMate
                            ,Finished: Finished
                            ,Game: Game
                            ,resetClock: resetClock
                            ,tick: tick
                            ,passTurn: passTurn
                            ,waitForPieceSelection: waitForPieceSelection
                            ,promotePiece: promotePiece
                            ,makeInitialGame: makeInitialGame
                            ,makeEnPassant: makeEnPassant
                            ,updateGraveyard: updateGraveyard
                            ,move: move
                            ,remove: remove
                            ,getPawnValidTakes: getPawnValidTakes
                            ,noSpecialMove: noSpecialMove
                            ,getPawnSpecialDestinations: getPawnSpecialDestinations
                            ,getSpecialDestinations: getSpecialDestinations
                            ,getValidDestinations: getValidDestinations
                            ,setValidDestinations: setValidDestinations
                            ,handleDestination: handleDestination
                            ,handleClick: handleClick};
   return _elm.Chess.Game.values;
};