Elm.Chess = Elm.Chess || {};
Elm.Chess.Piece = Elm.Chess.Piece || {};
Elm.Chess.Piece.make = function (_elm) {
   "use strict";
   _elm.Chess = _elm.Chess || {};
   _elm.Chess.Piece = _elm.Chess.Piece || {};
   if (_elm.Chess.Piece.values)
   return _elm.Chess.Piece.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Chess.Piece",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Color = Elm.Chess.Color.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var piece = F2(function (f,c) {
      return {_: {}
             ,color: c
             ,figure: f
             ,moved: false};
   });
   var Piece = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: c
             ,figure: a
             ,moved: b};
   });
   var King = {ctor: "King"};
   var Queen = {ctor: "Queen"};
   var Rook = {ctor: "Rook"};
   var Bishop = {ctor: "Bishop"};
   var Knight = {ctor: "Knight"};
   var Pawn = {ctor: "Pawn"};
   _elm.Chess.Piece.values = {_op: _op
                             ,Pawn: Pawn
                             ,Knight: Knight
                             ,Bishop: Bishop
                             ,Rook: Rook
                             ,Queen: Queen
                             ,King: King
                             ,Piece: Piece
                             ,piece: piece};
   return _elm.Chess.Piece.values;
};