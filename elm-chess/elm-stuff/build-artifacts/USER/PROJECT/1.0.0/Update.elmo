Elm.Update = Elm.Update || {};
Elm.Update.make = function (_elm) {
   "use strict";
   _elm.Update = _elm.Update || {};
   if (_elm.Update.values)
   return _elm.Update.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Update",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Board = Elm.Chess.Board.make(_elm),
   $Chess$Game = Elm.Chess.Game.make(_elm),
   $Chess$Piece = Elm.Chess.Piece.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var update = F2(function (action,
   game) {
      return function () {
         switch (action.ctor)
         {case "Click":
            return A2($Chess$Game.handleClick,
              game,
              action._0);
            case "Promote":
            return A3($Chess$Game.promotePiece,
              game,
              action._0,
              action._1);
            case "Restart":
            return $Chess$Game.makeInitialGame;
            case "UpdateTimer":
            return $Chess$Game.tick(game);}
         _U.badCase($moduleName,
         "between lines 19 and 36");
      }();
   });
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   var Promote = F2(function (a,
   b) {
      return {ctor: "Promote"
             ,_0: a
             ,_1: b};
   });
   var Restart = {ctor: "Restart"};
   var UpdateTimer = {ctor: "UpdateTimer"};
   _elm.Update.values = {_op: _op
                        ,UpdateTimer: UpdateTimer
                        ,Restart: Restart
                        ,Promote: Promote
                        ,Click: Click
                        ,update: update};
   return _elm.Update.values;
};