Elm.View = Elm.View || {};
Elm.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   if (_elm.View.values)
   return _elm.View.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "View",
   $Basics = Elm.Basics.make(_elm),
   $Chess$Board = Elm.Chess.Board.make(_elm),
   $Chess$Color = Elm.Chess.Color.make(_elm),
   $Chess$Game = Elm.Chess.Game.make(_elm),
   $Chess$Piece = Elm.Chess.Piece.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Update = Elm.Update.make(_elm);
   var clock = function (game) {
      return function () {
         var clockIcon = A2($Html.span,
         _L.fromArray([$Html$Attributes.$class("fa fa-clock-o status-bar__clock-icon")]),
         _L.fromArray([]));
         var turn = $String.toLower($Basics.toString(game.turn));
         var clockClassName = A2($Basics._op["++"],
         "status-bar__clock status-bar__clock--",
         turn);
         var clockMessage = function () {
            var msg = A2($Basics._op["++"],
            "waiting for ",
            turn);
            return A2($Html.span,
            _L.fromArray([$Html$Attributes.$class("status-bar__clock-message")]),
            _L.fromArray([$Html.text(msg)]));
         }();
         var time = function (f) {
            return $Basics.toString(A2(f,
            game.turnInSeconds,
            60));
         };
         var minutes = time(F2(function (x,
         y) {
            return x / y | 0;
         }));
         var ensure2digits = function (str) {
            return _U.eq($String.length(str),
            1) ? A2($Basics._op["++"],
            "0",
            str) : str;
         };
         var seconds = ensure2digits(time($Basics.rem));
         var parsedTime = A2($Basics._op["++"],
         minutes,
         A2($Basics._op["++"],
         ":",
         seconds));
         return A2($Html.span,
         _L.fromArray([$Html$Attributes.$class(clockClassName)]),
         _L.fromArray([clockIcon
                      ,$Html.text(parsedTime)
                      ,clockMessage]));
      }();
   };
   var getPieceClass = function (piece) {
      return $String.toLower(A2($String.join,
      " ",
      _L.fromArray(["piece"
                   ,$Basics.toString(piece.figure)
                   ,$Basics.toString(piece.color)])));
   };
   var renderBoardSquare = F4(function (address,
   state,
   position,
   square) {
      return function () {
         var emitPosition = $Html$Events.onClick(address)($Update.Click(position));
         var title$ = $Html$Attributes.title($Basics.toString(position));
         var highlight = function () {
            switch (state.ctor)
            {case "Destination":
               return A2($List.member,
                 position,
                 state._1) || _U.eq(position,
                 state._0) ? "valid-destination" : "";}
            return "";
         }();
         var renderSquare = function (pieceStyle) {
            return A2($Html.div,
            _L.fromArray([$Html$Attributes.$class(A2($String.join,
                         " ",
                         _L.fromArray(["square"
                                      ,highlight
                                      ,pieceStyle])))
                         ,emitPosition
                         ,title$]),
            _L.fromArray([]));
         };
         return function () {
            switch (square.ctor)
            {case "Just":
               return renderSquare(getPieceClass(square._0));
               case "Nothing":
               return renderSquare("");}
            _U.badCase($moduleName,
            "between lines 57 and 62");
         }();
      }();
   });
   var renderBoard = F4(function (address,
   turn,
   state,
   board) {
      return function () {
         var highlight = function () {
            switch (state.ctor)
            {case "Origin":
               return A2($String.join,
                 "-",
                 _L.fromArray(["highlight"
                              ,$String.toLower($Basics.toString(turn))
                              ,"pieces"]));}
            return "";
         }();
         var className = A2($String.join,
         " ",
         _L.fromArray(["chessboard"
                      ,highlight]));
         var positions = $Chess$Board.getPositions;
         var pieces = A2($List.map,
         $Chess$Board.getSquareContent(board),
         positions);
         var squares = A3($List.map2,
         A2(renderBoardSquare,
         address,
         state),
         positions,
         pieces);
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class(className)]),
         squares);
      }();
   });
   var renderGraveyardSquare = function (square) {
      return function () {
         var attrs = function () {
            switch (square.ctor)
            {case "Just":
               return getPieceClass(square._0);
               case "Nothing": return "";}
            _U.badCase($moduleName,
            "between lines 97 and 101");
         }();
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class(A2($Basics._op["++"],
         "graveyard square ",
         attrs))]),
         _L.fromArray([]));
      }();
   };
   var renderGraveyard = F2(function (graveyard,
   color) {
      return function () {
         var renderSquare = function (figure) {
            return function () {
               switch (figure.ctor)
               {case "Just":
                  return renderGraveyardSquare($Maybe.Just(A2($Chess$Piece.piece,
                    figure._0,
                    color)));
                  case "Nothing":
                  return renderGraveyardSquare($Maybe.Nothing);}
               _U.badCase($moduleName,
               "between lines 110 and 115");
            }();
         };
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class(F2(function (x,
         y) {
            return A2($Basics._op["++"],
            x,
            y);
         })("graveyard ")($String.toLower($Basics.toString(color))))]),
         A2($List.map,
         renderSquare,
         graveyard));
      }();
   });
   var renderStatusBar = F2(function (address,
   game) {
      return function () {
         var statusMsg = function () {
            var _v12 = game.state;
            switch (_v12.ctor)
            {case "Destination":
               return _L.fromArray([$Html.text("to select a destination")]);
               case "Finished":
               return _L.fromArray([$Html.text(A2($Basics._op["++"],
                 "the game has ended, ",
                 A2($Basics._op["++"],
                 $Basics.toString(_v12._0),
                 " has won!")))]);
               case "Origin":
               return _L.fromArray([$Html.text("select a piece")]);
               case "SelectPromotion":
               return function () {
                    var renderPromotionBtn = function (piece) {
                       return A2($Html.button,
                       _L.fromArray([$Html$Events.onClick(address)(A2($Update.Promote,
                                    _v12._0,
                                    piece.figure))
                                    ,$Html$Attributes.$class(A2($String.join,
                                    " ",
                                    _L.fromArray([getPieceClass(piece)
                                                 ,"square"
                                                 ,"status-bar__promotion-btn"])))]),
                       _L.fromArray([]));
                    };
                    return _L.fromArray([$Html.text("promote to:")
                                        ,renderPromotionBtn(A2($Chess$Piece.piece,
                                        $Chess$Piece.Queen,
                                        game.turn))
                                        ,renderPromotionBtn(A2($Chess$Piece.piece,
                                        $Chess$Piece.Knight,
                                        game.turn))]);
                 }();}
            _U.badCase($moduleName,
            "between lines 157 and 188");
         }();
         var statusBar = A2($Basics._op["++"],
         _L.fromArray([clock(game)]),
         statusMsg);
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class("status-bar")]),
         statusBar);
      }();
   });
   var renderGame = F2(function (address,
   game) {
      return function () {
         var magro = A2($Debug.watch,
         "state",
         game.state);
         var breno = A2($Debug.watch,
         "turn",
         game.turn);
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.$class("game")]),
         _L.fromArray([A2(renderStatusBar,
                      address,
                      game)
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.$class("board-and-graveyard")]),
                      _L.fromArray([A2(renderGraveyard,
                                   game.graveyard2,
                                   $Chess$Color.Black)
                                   ,A4(renderBoard,
                                   address,
                                   game.turn,
                                   game.state,
                                   game.board)
                                   ,A2(renderGraveyard,
                                   game.graveyard1,
                                   $Chess$Color.White)]))]));
      }();
   });
   _elm.View.values = {_op: _op
                      ,getPieceClass: getPieceClass
                      ,renderBoardSquare: renderBoardSquare
                      ,renderBoard: renderBoard
                      ,renderGraveyardSquare: renderGraveyardSquare
                      ,renderGraveyard: renderGraveyard
                      ,clock: clock
                      ,renderStatusBar: renderStatusBar
                      ,renderGame: renderGame};
   return _elm.View.values;
};