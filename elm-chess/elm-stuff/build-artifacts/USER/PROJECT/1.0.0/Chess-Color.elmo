Elm.Chess = Elm.Chess || {};
Elm.Chess.Color = Elm.Chess.Color || {};
Elm.Chess.Color.make = function (_elm) {
   "use strict";
   _elm.Chess = _elm.Chess || {};
   _elm.Chess.Color = _elm.Chess.Color || {};
   if (_elm.Chess.Color.values)
   return _elm.Chess.Color.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Chess.Color",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var White = {ctor: "White"};
   var Black = {ctor: "Black"};
   var other = function (color) {
      return function () {
         switch (color.ctor)
         {case "Black": return White;
            case "White": return Black;}
         _U.badCase($moduleName,
         "between lines 9 and 11");
      }();
   };
   _elm.Chess.Color.values = {_op: _op
                             ,Black: Black
                             ,White: White
                             ,other: other};
   return _elm.Chess.Color.values;
};